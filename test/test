#!/bin/bash
#
# wrapper script for test management
#
# @author <bprinty@gmail.com>
# --------------------------------------


# init
# ----
CWD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BASE=`git rev-parse --show-toplevel`
CACHE="$BASE/.xfer"
SANDBOX="$CWD/sandbox"
CONFIG="$CWD/config/local"
ERRORS=""


# funcs
# -----
usage() {
    echo ""
    echo "Usage: test <name> [<type>]"
    echo ""
    echo "Arguments:"
    echo "  <name>       Name of test to perform."
    echo ""
    echo "Optional Arguments:"
    echo "  <type>       Remote type to test (local|remote)" 
    echo ""
    exit 1
}

clean() {
    git remote rm testserver
    git xfer reset testserver
    rm -rf "$SANDBOX"
    rm -rf "$REPO"
    rm -rf "$CACHE"
}

create() {
    dir=`dirname "$1"`
    if [ "$dir" != "." ]; then
        mkdir -p "$dir"
    fi
    echo "$1" > "$1"
}

FAIL='FALSE'
assertEqual() {
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    NC='\033[0m'
    if [ "$1" == "$2" ]; then
        printf $GREEN'✓'$NC
    else
        printf $RED'✗'$NC
        ERRORS="$ERRORS\n$1 is not equal to $2!"
        FAIL='TRUE'
    fi
}

assertContains() {
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    NC='\033[0m'
    if [ `cat "$1" | grep "$2" | wc -l` -gt 0 ]; then
        printf $GREEN'✓'$NC
    else
        printf $RED'✗'$NC
        ERRORS="$ERRORS\n$1 does not contain $2!"
        FAIL='TRUE'
    fi
}

assertNotContains() {
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    NC='\033[0m'
    if [ `cat "$1" | grep "$2" | wc -l` -gt 0 ]; then
        printf $RED'✗'$NC
        ERRORS="$ERRORS\n$1 contains $2 when it should not!"
        FAIL='TRUE'
    else
        printf $GREEN'✓'$NC
    fi
}

assertExists() {
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    NC='\033[0m'
    if [ -e "$1" ]; then
        printf $GREEN'✓'$NC
    else
        printf $RED'✗'$NC
        ERRORS="$ERRORS\n$1 does not exist!"
        FAIL='TRUE'
    fi
}

getShasum() {
    if [ `uname` = "Darwin" ]; then
        shasum=`shasum "$1" | awk '{ print $1 }'`
    else
        shasum=`sha1sum "$1" | awk '{ print $1 }'`
    fi
    echo $shasum
}


# test
# ----
if [ $# -eq 0 ]; then
    usage
fi

if [ ! -z $2 ]; then
    CONFIG="$CWD/config/$2"
fi
source "$CONFIG"
REMOTE_SANDBOX=`echo $SANDBOX | sed "s|$BASE|$REPO|g"`
REMOTE_CACHE=`echo $CACHE | sed "s|$BASE|$REPO|g"`

if [ -e "$CWD/test-$1" ]; then
    git remote add testserver "$REMOTE"
    mkdir -p "$REPO"
    rm -rf "$REPO"
    cp -rf "$BASE" "$REPO"
    cp -rf "$BASE/.git" "$REPO/.git"
    mkdir -p "$SANDBOX" "$REMOTE_SANDBOX"
    pushd "$SANDBOX" 2>&1 1>/dev/null
    printf "$1 ........................... "
    source "$CWD/test-$1"
    echo ''
    popd 2>&1 1>/dev/null
fi


# clean
# -----
clean
if [ $FAIL == "TRUE" ]; then
    echo ""
    echo "Failed assertions: "
    printf "$ERRORS\n"
    echo ""
    exit 1
fi